---
// import Welcome from '../components/Welcome.astro';
// import Layout from '../layouts/Layout.astro';
export const prerender = false;

const { workout, user_id } = Astro.params;

if (
	typeof workout !== "string" ||
	!(
		workout === "squat" ||
		workout === "pushup" ||
		workout === "plank" ||
		workout === "jumping-jack" ||
		workout === "lunges"
	)
) {
	Astro.redirect("/404");
}
---

<script>
	let workout = document.body.getAttribute("data-workout");
	let user_id = document.body.getAttribute("data-user-id");
	console.log(workout, user_id);
	let video: HTMLVideoElement | null = null;
	let ws: WebSocket | null = null;
	let canvas: HTMLCanvasElement | null = null;
	let ctx: CanvasRenderingContext2D | null = null;
	let isConnected = false;
	let retryCount = 0;
	const MAX_RETRIES = 3;
	let frameCount = 0;
	let startTime = Date.now();
	let lastFrameTime = 0;
	const FRAME_INTERVAL = 1000 / 12;
	let isManuallyDisconnected = false;

	interface ParsedData {
		keypoints: [number, number][];
		confidence: number[];
		orig_shape: [number, number];
		squat_count: number;
	}

	async function startVideo(): Promise<void> {
		try {
			console.log("Starting video stream...");
			video = document.getElementById("video") as HTMLVideoElement;
			const stream = await navigator.mediaDevices.getUserMedia({
				video: true,
			});
			video.srcObject = stream;
			console.log("Video stream started");

			canvas = document.createElement("canvas");
			ctx = canvas.getContext("2d");

			const container = document.getElementById("video-container");
			if (container) {
				container.appendChild(canvas);
			}

			connectWebSocket();
		} catch (err) {
			console.error("Error accessing video:", err);
		}
	}

	function connectWebSocket(): void {
		if (isConnected) {
			console.log("WebSocket is already connected");
			return;
		}

		if (ws) {
			ws.close();
			ws = null;
		}

		ws = new WebSocket("ws://20.6.131.113:8000/ws");
		console.log("Connecting to WebSocket...");

		ws.onopen = (): void => {
			console.log("Connected to WebSocket server");
			isConnected = true;
			retryCount = 0;
			const connectBtn = document.getElementById(
				"connect-btn",
			) as HTMLButtonElement;
			const disconnectBtn = document.getElementById(
				"disconnect-btn",
			) as HTMLButtonElement;
			if (connectBtn) connectBtn.disabled = true;
			if (disconnectBtn) disconnectBtn.disabled = false;

			processFrame();
		};

		ws.onmessage = (event: MessageEvent): void => {
			try {
				const parsedData: ParsedData = JSON.parse(event.data);

				const { keypoints, confidence } = parsedData;

				if (!canvas || !ctx || !video) return;
				canvas.width = video.videoWidth;
				canvas.height = video.videoHeight;

				ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

				ctx.strokeStyle = "red";
				ctx.fillStyle = "red";
				ctx.lineWidth = 2;

				keypoints.forEach((point, index) => {
					if (confidence[index] > 0.5) {
						const [x, y] = point;
						ctx?.beginPath();
						ctx?.arc(x, y, 5, 0, Math.PI * 2);
						ctx?.fill();
						ctx?.stroke();
					}
				});

				const skeleton: [number, number][] = [
					[0, 1],
					[0, 2],
					[1, 3],
					[2, 4],
					[5, 6],
					[5, 7],
					[6, 8],
					[7, 9],
					[8, 10],
					[11, 12],
					[11, 13],
					[12, 14],
					[13, 15],
					[14, 16],
				];
				for (const [a, b] of skeleton) {
					if (confidence[a] > 0.5 && confidence[b] > 0.5) {
						ctx.beginPath();
						ctx.moveTo(keypoints[a][0], keypoints[a][1]);
						ctx.lineTo(keypoints[b][0], keypoints[b][1]);
						ctx.stroke();
					}
				}

				const squatCountElem = document.getElementById("squat-count");
				if (squatCountElem) {
					squatCountElem.textContent = `Squats: ${parsedData.squat_count}`;
				}
			} catch (err) {
				console.error("Error processing message:", err);
				handleDisconnect();
			}
		};

		ws.onerror = (error: Event): void => {
			console.error("WebSocket error:", error);
			handleDisconnect();
		};

		ws.onclose = (event: CloseEvent): void => {
			console.log(
				"WebSocket connection closed:",
				event.code,
				event.reason,
			);
			handleDisconnect();

			if (
				!isManuallyDisconnected &&
				event.wasClean &&
				retryCount < MAX_RETRIES
			) {
				retryCount++;
				console.log(
					`Attempting to reconnect (${retryCount}/${MAX_RETRIES})...`,
				);
				setTimeout(connectWebSocket, 2000);
			}
		};
	}

	function handleDisconnect(): void {
		console.log("Disconnected from WebSocket");
		isConnected = false;
		const connectBtn = document.getElementById(
			"connect-btn",
		) as HTMLButtonElement;
		const disconnectBtn = document.getElementById(
			"disconnect-btn",
		) as HTMLButtonElement;
		if (connectBtn) connectBtn.disabled = false;
		if (disconnectBtn) disconnectBtn.disabled = true;
		isManuallyDisconnected = true;
	}

	async function processFrame(): Promise<void> {
		try {
			if (
				!video ||
				!ws ||
				!isConnected ||
				video.readyState !== video.HAVE_ENOUGH_DATA
			) {
				console.log("Skipping frame: video not ready or not connected");
				return;
			}

			if (!canvas || !ctx) return;
			canvas.width = video.videoWidth;
			canvas.height = video.videoHeight;

			ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

			canvas.toBlob((blob) => {
				if (blob && isConnected && ws) {
					ws.send(blob);
					frameCount++;
					lastFrameTime = Date.now();

					const elapsed = Date.now() - startTime;
					const fps = Math.round((frameCount * 1000) / elapsed);
					const fpsElem = document.getElementById("fps");
					if (fpsElem) fpsElem.textContent = `FPS: ${fps}`;

					setTimeout(() => processFrame(), FRAME_INTERVAL);
				} else {
					console.log(
						"Skipping frame: blob creation failed or not connected",
					);
					setTimeout(() => processFrame(), FRAME_INTERVAL);
				}
			}, "image/jpeg");
		} catch (err) {
			console.error("Error processing frame:", err);
			handleDisconnect();
		}
	}

	window.addEventListener("load", startVideo);

	window.addEventListener("beforeunload", () => {
		if (ws) {
			ws.close();
		}
	});

	const connectBtn = document.getElementById("connect-btn");
	if (connectBtn) connectBtn.addEventListener("click", connectWebSocket);

	const disconnectBtn = document.getElementById("disconnect-btn");
	if (disconnectBtn)
		disconnectBtn.addEventListener("click", () => {
			if (ws) {
				ws.close();
			}
		});
</script>

<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Body Tracker</title>
		<link rel="stylesheet" href="https://matcha.mizu.sh/matcha.css" />
	</head>

	<body data-workout={workout} data-user-id={user_id}>
		<div id="video-container">
			<video id="video" autoplay playsinline hidden></video>
		</div>
		<div id="results">
			<div id="fps">FPS: 0</div>
			<div id="squat-count">Squats: 0</div>
		</div>
		<button id="connect-btn">Connect</button>
		<button id="disconnect-btn" disabled>Disconnect</button>
	</body>
</html>
